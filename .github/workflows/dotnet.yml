# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET

on: [push, pull_request]

jobs:

  build:
    name: build

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
    - name: Restore dependencies
      run: dotnet restore "Dnd-Inventory/Dnd Inventory.sln"
    - name: Build
      run: dotnet build "Dnd-Inventory/Dnd Inventory.sln" --no-restore
  unit_test:
    name: unit_test
    needs: build

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Tests
      run: dotnet test "Dnd-Inventory/Tests/Tests.csproj"

  integration_test:
    name: integration_test
    needs: build

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup MySQL
      uses: mirromutth/mysql-action@v1.1
      with:
        host port: 3307
        container port: 3307
        mysql user: 'root'
        mysql root password: ${{ secrets.DB_PASS }}
        mysql database: 'dndtestinventory'
    - name: Restore dependencies
      run: dotnet restore "Dnd-Inventory/Integration test/Integration test.csproj"    
    - name: Tests
      run: dotnet test "Dnd-Inventory/Integration test/Integration test.csproj" --no-restore
  analyse:
    needs: integration_test
    runs-on: ubuntu-latest
    steps:
    - name: Setup Java JDK
      uses: actions/setup-java@v4.0.0
      with:
        java-version: '17.0.9+8'
        distribution: 'zulu'
    - uses: actions/checkout@v4
    - name: Cache SonarCloud packages
      uses: actions/cache@v3
      with:
        path: .\sonar\cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar
    - name: Cache SonarCloud scanner
      id: cache-sonar-scanner
      uses: actions/cache@v3
      with:
        path: ~/.sonar/scanner
        key: ${{ runner.os }}-sonar-scanner
        restore-keys: ${{ runner.os }}-sonar-scanner

    - name: Install SonarCloud scanner
      if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
      run: |
        mkdir -p ~/.sonar/scanner
        dotnet tool update dotnet-sonarscanner --tool-path ~/.sonar/scanner
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
    - name: Setup MySQL
      uses: mirromutth/mysql-action@v1.1
      with:
        host port: 3307
        container port: 3307
        mysql user: 'root'
        mysql root password: ${{ secrets.DB_PASS }}
        mysql database: 'dndtestinventory'
    - name: Build and analyze
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        dotnet tool install --global dotnet-coverage
        pushd Dnd-Inventory
        ~/.sonar/scanner/dotnet-sonarscanner begin /k:"MatsDaamen_Dnd-inventory" /o:"matsdaamen" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.vscoveragexml.reportsPaths=coverage.xml
        dotnet build --no-incremental
        dotnet-coverage collect "dotnet test" -f xml -o "coverage.xml"
        ~/.sonar/scanner/dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
        popd
        
  end-to-end-tests:
    name: End to End Tests
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup MySQL
      uses: mirromutth/mysql-action@v1.1
      with:
        host port: 3307
        container port: 3307
        mysql user: 'root'
        mysql root password: ${{ secrets.DB_PASS }}
        mysql database: 'dndtestinventory'

    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
    - name: Restore dependencies
      run: dotnet restore "Dnd-Inventory/Dnd Inventory.sln"
    - name: Build
      run: dotnet build "Dnd-Inventory/Dnd Inventory.sln" --no-restore 

    - name: Install dependencies
      run: |
        pushd dnd-inventory-front-end
        npm install vitest
        npx playwright install --with-deps
        popd

    - name: 'Create env file'
      run: |
        pushd dnd-inventory-front-end
        touch .env
        echo VITE_AUTH0_ID=${{secrets.VITE_ID}} >> .env
        echo VITE_AUTH0_DOMAIN=${{secrets.VITE_DOMAIN}} >> .env
        echo VITE_AUTH0_SECRET=${{secrets.VITE_SECRET}} >> .env
        echo VITE_API_URL=http://localhost:5254/api >> .env
        echo VITE_HUB_URL=http://localhost:5254/hub >> .env
        echo VITE_AUTH_API_TOKEN=${{secrets.VITE_TOKEN}} >> .env
        cat .env
        sudo netstat -tunlp
        popd
        
    - name: Run Tests
      run: |
        pushd dnd-inventory-front-end
        npx playwright test
        popd
